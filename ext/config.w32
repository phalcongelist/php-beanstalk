ARG_ENABLE("beanspeak", "enable beanspeak", "no");

if (PHP_BEANSPEAK != "no") {
  EXTENSION("beanspeak", "beanspeak.c", null, "-I"+configure_module_dirname);
  ADD_SOURCES(configure_module_dirname + "/kernel", "main.c memory.c exception.c hash.c debug.c backtrace.c object.c array.c string.c fcall.c require.c file.c operators.c math.c concat.c variables.c filter.c iterator.c exit.c time.c", "beanspeak");
  ADD_SOURCES(configure_module_dirname + "/kernel/extended", "array.c fcall.c", "beanspeak");
  /* PCRE is always included on WIN32 */
  AC_DEFINE("ZEPHIR_USE_PHP_PCRE", 1, "Whether PHP pcre extension is present at compile time");
  if (PHP_JSON != "no") {
    ADD_EXTENSION_DEP("beanspeak", "json");
    AC_DEFINE("ZEPHIR_USE_PHP_JSON", 1, "Whether PHP json extension is present at compile time");
  }
  
  ADD_SOURCES(configure_module_dirname + "/beanspeak/command", "commandinterface.zep.c choose.zep.c exception.zep.c pausetube.zep.c put.zep.c reserve.zep.c stats.zep.c", "beanspeak");
	ADD_SOURCES(configure_module_dirname + "/beanspeak", "command.zep.c beanspeak.zep.c connection.zep.c dispatcher.zep.c exception.zep.c job.zep.c", "beanspeak");
	ADD_SOURCES(configure_module_dirname + "/beanspeak/response/parser", "parserinterface.zep.c exception.zep.c yaml.zep.c", "beanspeak");
	ADD_SOURCES(configure_module_dirname + "/beanspeak/connection", "connectionawareinterface.zep.c connectioninterface.zep.c exception.zep.c", "beanspeak");
	ADD_SOURCES(configure_module_dirname + "/beanspeak/dispatcher", "dispatcherawareinterface.zep.c dispatcherinterface.zep.c exception.zep.c", "beanspeak");
	ADD_SOURCES(configure_module_dirname + "/beanspeak/job", "jobinterface.zep.c exception.zep.c", "beanspeak");
	ADD_SOURCES(configure_module_dirname + "/beanspeak/response", "responseinterface.zep.c arrayresponse.zep.c exception.zep.c", "beanspeak");
  ADD_FLAG("CFLAGS_BEANSPEAK", "/D ZEPHIR_RELEASE");
}
